import { existsSync } from "node:fs";
import { readFile, writeFile } from "node:fs/promises";
import path from "node:path";
import process from "node:process";
import { dedent } from "@luxass/utils";
import * as ts from "typescript";

const root = path.resolve(import.meta.dirname, "../");

async function run() {
  console.log("extracting components from api.d.ts...");

  const apiDefinitionPath = path.join(root, "src", ".generated", "api.d.ts");
  if (!existsSync(apiDefinitionPath)) {
    throw new Error(`API definition file not found: ${apiDefinitionPath}`);
  }

  const apiDefinition = await readFile(apiDefinitionPath, "utf-8");

  const sourceFile = ts.createSourceFile(
    apiDefinitionPath,
    apiDefinition,
    ts.ScriptTarget.Latest,
    true,
  );

  let content = dedent`
          /**
           * This file is auto-generated by the \`generate:components\` script.
           * Do not edit this file directly.
           * Run \`pnpm generate:components\` to regenerate it.
           */

          import type { components } from "./.generated/api";
  `;

  let index = 0;

  function visit(node: ts.Node) {
    if (ts.isInterfaceDeclaration(node) && node.name.text === "components") {
      node.members.forEach((member) => {
        if (ts.isPropertySignature(member)
          && member.name
          && ts.isIdentifier(member.name)
          && member.name.text === "schemas") {
          if (member.type && ts.isTypeLiteralNode(member.type)) {
            member.type.members.forEach((schemaMember) => {
              if (!ts.isPropertySignature(schemaMember) || !ts.isIdentifier(schemaMember.name)) {
                return;
              }

              content += `${index === 0 ? "\n\n" : ""}export type ${schemaMember.name.text} = components["schemas"]["${schemaMember.name.text}"];\n`;
              index++;
            });
          }
        }
      });
    }

    ts.forEachChild(node, visit);
  }

  visit(sourceFile);

  await writeFile(path.join(root, "src", "components.ts"), content);
}

run().catch((err) => {
  console.error(err);
  process.exit(1);
});
