import { readFile } from "node:fs/promises";
import path from "node:path";
import { RawDataFile } from "@luxass/unicode-utils";
import { toPascalCase, toSnakeCase } from "@luxass/utils";
import { genArrayFromRaw, genInterface } from "knitwork";
import pLimit from "p-limit";
import { generateFields } from "./fields";

export interface SchemaGenFile {
  /**
   * The filePath to the data file.
   */
  filePath: string;

  /**
   * The version of the data file.
   */
  version: string;
}

export interface ProcessedFile {
  fields: {
    type: string;
    name: string;
    description: string;
  }[];
  code: string;
  fileName: string;
  version: string;
}

export interface SchemaGenOptions {
  /**
   * Files to generate structures for.
   */
  files: SchemaGenFile[];

  /**
   * The OpenAI API key to use for generating the schema.
   */
  openaiKey: string;
}

export async function runSchemagen(options: SchemaGenOptions): Promise<ProcessedFile[]> {
  const inputFiles = options.files;

  const limit = pLimit(10);

  const processPromises = inputFiles.map(({ filePath, version }) =>
    limit(() => processFile(filePath, options.openaiKey, version)),
  );

  return Promise.all(processPromises)
    .then((results) => results.filter((result: ProcessedFile | null): result is ProcessedFile => result !== null));
};

async function processFile(filePath: string, openaiKey: string, version: string): Promise<ProcessedFile | null> {
  try {
    // eslint-disable-next-line no-console
    console.log(`Processing file: ${filePath}`);
    const content = await readFile(filePath, "utf-8");
    const fileName = path.basename(filePath).replace(/\.txt$/, "");
    const datafile = new RawDataFile(content, fileName);

    if (datafile.heading == null) {
      console.error(`heading for file ${filePath} is null. Skipping file.`);
      return null;
    }

    const fields = await generateFields({
      datafile,
      apiKey: openaiKey,
    });

    if (fields == null) {
      console.error(`Error generating fields for file: ${filePath}`);
      return null;
    }

    let code = ``;

    const properties: Record<string, string> = {};

    for (const field of fields) {
      // TODO(luxass): when this gets merged https://github.com/unjs/knitwork/pull/115
      // we can add jsdoc for the interface.
      properties[field.name] = field.type;
    }

    code += `// This file is generated by ucd codegen. Do not edit this file directly.\n`;
    code += `// Unicode Version: ${version}\n\n`;
    code += `${genInterface(toPascalCase(fileName), properties, {
      export: true,
    })}\n\n`;
    code += `export const ${toSnakeCase(fileName).toUpperCase()}_FIELDS = ${genArrayFromRaw(fields.map((f) => f.name))};\n\n`;

    return {
      fields,
      fileName,
      version,
      code,
    };
  } catch (error) {
    console.error(`Error processing file ${filePath}:`, error);
    return null;
  }
}
