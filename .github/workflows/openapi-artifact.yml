name: openapi artifacts

on:
  pull_request:
    paths-ignore:
      - ".vscode/**"
      - "**/*.md"
      - ".github/ISSUE_TEMPLATE/**"

# automatically cancel older in-progress jobs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  FORCE_COLOR: true

permissions: {}

jobs:
  upload-openapi:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - branch: main
            artifact: main
          - branch: ${{ github.head_ref }}
            artifact: pull-request

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          ref: ${{ matrix.branch }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: setup node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install dependencies
        run: pnpm install --frozen-lockfile

      - name: generate openapi artifact
        run: pnpm --filter=@ucdjs/api-worker build:openapi

      - name: upload openapi schema to artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: openapi-${{ matrix.artifact }}
          path: ./apps/api/.generated/openapi.json
          if-no-files-found: error
          # TODO: maybe we should move the openapi.json to a non hidden location?
          include-hidden-files: true

  report-changes:
    needs: upload-openapi
    runs-on: ubuntu-latest
    if: github.repository == 'ucdjs/ucd'
    permissions:
      pull-requests: write
      statuses: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: download openapi artifacts (pull-request)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: openapi-pull-request
          path: openapi-artifacts/pull-request

      - name: download openapi artifacts (main)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: openapi-main
          path: openapi-artifacts/main

      - name: setup node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: lts/*

      - name: compare openapi schemas
        id: compare
        env:
          MAIN_SCHEMA_PATH: openapi-artifacts/main/openapi.json
          PR_SCHEMA_PATH: openapi-artifacts/pull-request/openapi.json
          OUTPUT_PATH: openapi-diff.md
        run: |
          node .github/scripts/compare-openapi.ts

      - name: find existing comment
        id: find-comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: <!-- ucdjs:openapi-artifacts -->


      - name: create or update comment
        id: create-comment
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        env:
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: openapi-diff.md
          edit-mode: replace

      - name: add approval reaction for breaking changes
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: steps.compare.outputs.has_breaking_changes == 'true'
        env:
          COMMENT_ID: ${{ steps.create-comment.outputs.comment-id || steps.find-comment.outputs.comment-id }}
        with:
          script: |
            const commentId = process.env.COMMENT_ID;

            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              content: '+1'
            });

            console.log('Added +1 reaction for breaking changes approval');

      - name: create status check based on changes
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          HAS_CHANGES: ${{ steps.compare.outputs.has_changes }}
          HAS_BREAKING_CHANGES: ${{ steps.compare.outputs.has_breaking_changes }}
          ADDED_ENDPOINTS: ${{ steps.compare.outputs.added_endpoints }}
          REMOVED_ENDPOINTS: ${{ steps.compare.outputs.removed_endpoints }}
          MODIFIED_ENDPOINTS: ${{ steps.compare.outputs.modified_endpoints }}
          ADDED_COMPONENTS: ${{ steps.compare.outputs.added_components }}
          REMOVED_COMPONENTS: ${{ steps.compare.outputs.removed_components }}
          MODIFIED_COMPONENTS: ${{ steps.compare.outputs.modified_components }}
        with:
          script: |
            const hasChanges = process.env.HAS_CHANGES === 'true';
            const hasBreakingChanges = process.env.HAS_BREAKING_CHANGES === 'true';
            const addedEndpoints = parseInt(process.env.ADDED_ENDPOINTS);
            const removedEndpoints = parseInt(process.env.REMOVED_ENDPOINTS);
            const modifiedEndpoints = parseInt(process.env.MODIFIED_ENDPOINTS);
            const addedComponents = parseInt(process.env.ADDED_COMPONENTS);
            const removedComponents = parseInt(process.env.REMOVED_COMPONENTS);
            const modifiedComponents = parseInt(process.env.MODIFIED_COMPONENTS);

            let state, description;

            if (!hasChanges) {
              state = 'success';
              description = 'No OpenAPI schema changes detected';
            } else if (hasBreakingChanges) {
              state = 'failure';
              const breakingItems = [];
              if (removedEndpoints > 0) breakingItems.push(`${removedEndpoints} endpoint(s)`);
              if (removedComponents > 0) breakingItems.push(`${removedComponents} schema(s)`);
              description = `Breaking changes: removed ${breakingItems.join(' and ')}`;
            } else {
              state = 'success';
              const changes = [];
              if (addedEndpoints > 0) changes.push(`+${addedEndpoints} endpoint(s)`);
              if (addedComponents > 0) changes.push(`+${addedComponents} schema(s)`);
              if (modifiedEndpoints > 0) changes.push(`~${modifiedEndpoints} endpoint(s)`);
              if (modifiedComponents > 0) changes.push(`~${modifiedComponents} schema(s)`);
              description = `Non-breaking changes: ${changes.join(', ')}`;
            }

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.HEAD_SHA,
              state: state,
              target_url: `${context.payload.pull_request.html_url}`,
              description: description,
              context: 'openapi-schema-check'
            });
